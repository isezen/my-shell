#!/bin/bash
# sezenismail@gmail.com
# 2014-11-24
# Colorfull Long Listing
# Passes arguments to 'ls -l' command.

_tsmp=$(( $(date +%s%N)/1000000 ));

# DEFINITIOS
declare -r _usr='you';
# TIME STAMP LABES
declare -r _lsec='sec'
declare -r _lmin='min'
declare -r _lhrs='hrs'
declare -r _lday='day'
declare -r _lmon='mon'
declare -r _lyr='yr'
# SIZE LABELS
declare -r _lT='T'
declare -r _lG='G'
declare -r _lM='M'
declare -r _lK='K'
declare -r _lB='B'

# COLORS
declare -r _creset=$'\x1b[0m' # DON'T CHANGE THIS!
# PERMISSION COLORS
declare -r _cd=$'\x1b[38;5;122m'
declare -r _cl=$'\x1b[38;5;190m'
declare -r _cr=$'\x1b[38;5;119m'
declare -r _cw=$'\x1b[38;5;216m'
declare -r _cx=$'\x1b[38;5;124m'
declare -r _cplus=$'\x1b[38;5;129m'
#USER COLOR
declare -r _cusr=$'\x1b[38;5;66m'
declare -r _croot=$'\x1b[38;5;160m'
# FILE SIZE COLORS
declare -r _cb=$'\x1b[38;5;240m' # byte
declare -r _ck=$'\x1b[38;5;250m' # kilobyte
declare -r _cm=$'\x1b[38;5;117m' # megabyte
declare -r _cg=$'\x1b[38;5;208m' # Gigabyte
declare -r _ct=$'\x1b[38;5;160m' # Terabyte
#FILE SIZE LABEL COLORS
declare -r _clT=$'\x1b[1;38;5;167m' # Byte
declare -r _clG=$'\x1b[1;38;5;220m' # Kilobyte
declare -r _clM=$'\x1b[1;38;5;123m' # Megabyte
declare -r _clK=$'\x1b[1;38;5;107m' # Gigabyte
declare -r _clB=$'\x1b[1;38;5;248m' # Terabyte
# TIME COLORS
declare -r _csec=$'\x1b[38;5;124m'
declare -r _cmin=$'\x1b[38;5;215m'
declare -r _chrs=$'\x1b[38;5;196m'
declare -r _cday=$'\x1b[38;5;230m'
declare -r _cmon=$'\x1b[38;5;151m'
declare -r _cyr=$'\x1b[38;5;241m'

_CURCOL=1 # Defines current column processed. DON'T CHANGE THIS!

# Get optional args process them later for my own needs.
# optional_args=$(echo "$@" | sed -e 's/^/ /g' -e 's/ [^-][^ ]*//g' -e 's/^ *//g')

# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options/7680682#7680682
# -C option can not be used
# -D, --dired cannot be used. I don't know what it is o.O
# --format=WORD can not be used.
# --full-time can not be used.
# -H, --dereference-command-line is not used.
# --dereference-command-line-symlink-to-dir is not used.
# -i, --inode FIXME [Not implemented yet] (print the index number of each file)
# -l NOT USED.
# -L, --dereference NOT USED
# -m     fill width with a comma separated list of entries NOT USED
# -T, --tabsize=COLS IS NOT USED
# -R, --recursive CAN NOT BE USED.
# -w, --width=COLS NOT USED
# -x  list entries by lines instead of by columns NOT USED.
# -Z, --context NOT IMPLEMENTED YET
## PERF: ~5 ms
OPTERR=0
optspec="aAbBcdfFgGhIknNopqQrsStuUvX-:"
while getopts "$optspec" optchar; do
  case "${optchar}" in
    -)
    case "${OPTARG}" in
      all);; # do not ignore entries starting with .
      almost-all);; # do not list implied . and ..
      author);; # with -l, print the author of each file
      escape);; # print C-style escapes for nongraphic characters
      block-size=*) # scale sizes by SIZE before printing them # FIXME
      echo "NOT IMPLEMENTED YET"
      exit 0;
      ;;
      ignore-backups);; # ignore backups
      color);;
      # colorize  the  output; WHEN can be 'never', 'auto', or 'always' (the default);
      # more info below
      directory) # -d | list directories themselves, not their contents
      LISTDIRECTORY=1
      ;;
      classify);; # append indicator (one of */=>@|) to entries
      file-type);; # likewise, except do not append '*'
      group-directories-first);; # group directories before files;
      # can  be  augmented  with a --sort option, but any use of --sort=none (-U) disables grouping
      no-group);; # in a long listing, don't print group names
      human-readable)# with -l and/or -s, print human readable sizes (e.g., 1K 234M 2G)
      HUMANREADABLE=1
      ;;
      si) # likewise, but use powers of 1000 not 1024
      HUMANREADABLE=1
      ;;
      hide=*);;
      ignore=*);; # -I | do not list implied entries matching shell PATTERN
      kibibytes);; # -k | default to 1024-byte blocks for disk usage
      numeric-uid-gid) ## -n | like -l, but list numeric user and group IDs
      NUMERICUIDGID=1
      ;;
      literal);; # -N | print raw entry names (dont treat e.g. control characters specially)
      indicator-style=*);; # -p append / indicator to directories
      hide-control-chars);; # -q | print ? instead of nongraphic characters
      show-control-chars);; # show nongraphic characters as-is (the default, unless program is 'ls' and output is a terminal)
      quote-name);; # -Q | enclose entry names in double quotes
      quoting-style=*);;
      # use  quoting  style  WORD  for  entry  names:  literal,  locale,   shell,
      # shell-always, c, escape
      reverse);; # -r | reverse order while sorting
      size) # -s | print the allocated size of each file, in blocks
      ASIZE=1
      ;;
      sort=*);; # sort  by  WORD  instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X)
      time=*);;
      # with -l, show time as WORD instead of default modification time: atime or
      # access  or use (-u) ctime or status (-c); also use specified time as sort
      # key if --sort=time
      time-style=*)
      # with -l, show times using style STYLE: full-iso, long-iso,  iso,  locale,
      # or  +FORMAT;  FORMAT  is  interpreted  like  in 'date'; if FORMAT is FOR-
      # MAT1<newline>FORMAT2, then FORMAT1 applies to non-recent files  and  FOR-
      # MAT2  to  recent  files;  if STYLE is prefixed with 'posix-', STYLE takes
      # effect only outside the POSIX locale
      echo "NOT IMPLEMENTED YET"
      exit 0;
      ;;
      help)
      \ls --help
      exit 0;
      ;;
      version)
      \ls --version
      exit 0;
      ;;
      *)
      if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
        echo "Unknown option --${OPTARG}" >&2
        exit 0;
      fi
      ;;
    esac;;
    a);;
    A);;
    b);;
    B);; # Ignore backups
    c);;
    # with  -lt:  sort by, and show, ctime (time of last modification of file status
    # information); with -l: show ctime and sort by name; otherwise: sort by  ctime,
    # newest first
    d) # list directories themselves, not their contents
    LISTDIRECTORY=1
    ;;
    f);; # do not sort, enable -aU, disable -ls --color FIXME:Remove color
    F);; # append indicator (one of */=>@|) to entries
    g) # like -l, but do not list owner
    OWNER=0
    ;;
    G) # in a long listing, don't print group names
    GROUPNAME=0
    ;;
    h) # with -l and/or -s, print human readable sizes (e.g., 1K 234M 2G)
    HUMANREADABLE=1
    ;;
    I) # --ignore=PATTERN | do not list implied entries matching shell PATTERN
    echo "USE --ignore=PATTERN"
    exit 0;
    ;;
    k);; # --kibibytes | default to 1024-byte blocks for disk usage
    n) ## --numeric-uid-gid | like -l, but list numeric user and group IDs
    NUMERICUIDGID=1
    ;;
    N);; # --literal | print raw entry names (dont treat e.g. control characters specially)
    o) # like -l, but do not list group information
    GROUPNAME=0
    ;;
    p);; # --indicator-style=slash | append / indicator to directories
    q);; # --hide-control-chars | print ? instead of nongraphic characters
    Q);; # --quote-name | enclose entry names in double quotes
    r);; # --reverse  reverse order while sorting
    s) # --size | print the allocated size of each file, in blocks
    ASIZE=1
    ;;
    S);; # sort by file size
    t);; # sort by modification time, newest first
    u);;
    # with  -lt:  sort by, and show, access time; with -l: show access time and sort
    # by name; otherwise: sort by access time
    U);; # do not sort; list entries in directory order
    v);; # natural sort of (version) numbers within text
    X) # sort alphabetically by entry extension
    ;;
    *)
    # Don't catch non-option arguments. let it be processed by ls.
    # if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
    #   echo "Non-option argument: '-${OPTARG}'" >&2
    #   exit 0;
    # fi
    ;;
  esac
done

flush_left() { _len=$(echo "$1" | wc -L); echo "$1" | awk '{printf("%-'$_len's\n", $1);}';}
flush_right() { _len=$(echo "$1" | wc -L); echo "$1" | awk '{printf("%'$_len's\n", $1);}';}

# Run ls command first and get the result file/folder list.
#                            Get dates directly as seconds
ll_res=$(\ls --color "$@" -l --time-style=+"%s" | tr -s ' ') ## PERF: ~30 ms

if [ -z ${LISTDIRECTORY+x} ]; then # if -g is not set
  ## PERF: ~30 ms
  ll_total=$(echo "$ll_res" | head -n 1) ## PERF: ~16ms.
  ll_res=$(echo "$ll_res" | tail -n +2) ## PERF: ~20ms.
fi

if [ ! -z ${ASIZE+x} ]; then # if -s is set
  # Remove leading white spaces
  ll_res=$(echo "$ll_res" | sed -e 's/^[ \t]*//') ###### PERF:~18ms
  #                       # Cut first column
  _sizes=$(echo "$ll_res" | cut -d" " -f $_CURCOL) ###### PERF:~15ms
  _CURCOL=$(($_CURCOL+1)) ###### PERF:~5ms
  if [ -z ${HUMANREADABLE+x} ]; then # if -h is not set ###### PERF:~60ms
    _len_sizes=$(echo "$_sizes" | wc -L) ###### PERF:~17ms
    IFS=$'\n'; arr=( $(echo -e "$_sizes") ) ###### PERF:~9ms
    _sizes=$(for x in ${arr[@]} ; do ###### PERF:~50ms
      _format="%"$_len_sizes"d"
      if [[ $x -lt 1024 ]]; then printf "$_cb$_format$_creset\n" $x;continue; fi
      if [[ $x -lt 1048576 ]]; then printf "$_ck$_format$_creset\n" $x;continue; fi
      if [[ $x -lt 1073741824 ]]; then printf "$_cm$_format$_creset\n" $x;continue; fi
      if [[ $x -lt 1099511627776 ]]; then printf "$_cg$_format$_creset\n" $x;continue; fi
      if [[ $x -ge 1099511627776 ]]; then printf "$_ct$_format$_creset\n" $x;continue; fi
      done;)
  else # if -h is set ###### PERF:~62ms
    #Colorize B,K,M,G,T
    _prgx="[0-9]*\.*[0-9]*"
    # Add B letter at the end of Byte values.
    _sizes=$(echo "$_sizes" | sed -e  '/[0-9]$/ s/$/B/'); ###### PERF:~13ms
    _sizes=$(flush_right "$_sizes") # Align Right  ###### PERF:~26ms
    _sizes=$(echo "$_sizes" | ###### PERF:~30ms
    sed -e "s/$_prgx$_lT/$_ct&$_creset/" |
    sed -e "s/$_prgx$_lG/$_cg&$_creset/" |
    sed -e "s/$_prgx$_lM/$_cm&$_creset/" |
    sed -e "s/$_prgx$_lK/$_ck&$_creset/" |
    sed -e "s/$_prgx$_lB/$_cb&$_creset/" |
    sed -e "s/$_lT/$_clT&$_creset/" |
    sed -e "s/$_lG/$_clG&$_creset/" |
    sed -e "s/$_lM/$_clM&$_creset/" |
    sed -e "s/$_lK/$_clK&$_creset/" |
    sed -e "s/$_lB/$_clB&$_creset/");
  fi
  res=$(echo "$_sizes") ###### PERF:~10ms
fi

# FILE PERMISSIONS
###### PERF:~51ms
# Get file permissions column (remove total line)
_perms=$(echo "$ll_res" | cut -d" " -f $_CURCOL | awk '{printf("%-11s\n", $1);}') # Flush left  ###### PERF:~10ms
_CURCOL=$(($_CURCOL+1)) ###### PERF:~5ms
_perms=$(echo "$_perms" | ###### PERF:~23ms
  sed -e "s/d/$_cd&$_creset/g" |
  sed -e "s/l/$_cl&$_creset/g" |
  sed -e "s/r/$_cr&$_creset/g" |
  sed -e "s/w/$_cw&$_creset/g" |
  sed -e "s/x/$_cx&$_creset/g" |
  sed -e "s/+/$_cplus&$_creset/g");
#             ###### PERF:~23ms                                      ###### PERF:~18ms
[[ $res ]] && res=$(paste -d" " <(echo "$res") <(echo "$_perms")) || res=$(echo "$_perms")

# HARD LINKS
###### PERF:~34ms
#                        # Get hard links column # Flush right
_hlinks=$(echo "$ll_res" | cut -d" " -f $_CURCOL | sed -e :a -e 's/^.\{1,1\}$/ &/;ta') ###### PERF:~18ms
_CURCOL=$(($_CURCOL+1)) ###### PERF:~5ms
res=$(paste -d" " <(echo "$res") <(echo "$_hlinks")) ###### PERF:~20ms

# USERS
if [ -z ${OWNER+x} ]; then # if -g is not set
  ###### PERF:~14ms
  _users=$(echo "$ll_res" | cut -d" " -f $_CURCOL) ###### PERF:~15ms
  _CURCOL=$(($_CURCOL+1)) ###### PERF:~5ms
  if [ -z ${NUMERICUIDGID+x} ]; then # if -n is not set ###### PERF:~41ms
    #                         Get user List   # Replace $USER by 'you'
    _users=$(echo "$_users" | sed -e "s/$USER/$_usr/") ###### PERF:~12ms
    _users=$(flush_left "$_users") ###### PERF:~26ms
    _users=$(echo "$_users" | sed -e "s/$_usr/$_cusr&$_creset/g" | sed -e "s/root/$_croot&$_creset/g"); ###### PERF:~13ms
  else # if -n is set
    ###### PERF:~25ms
    _myuserid="$(id -u "$USER")$" ###### PERF:~11ms
    _rootuserid="$(id -u "root")$" ###### PERF:~11ms
    _users=$(echo "$_users" | sed -e "s/$_myuserid/$_cusr&$_creset/g" | sed -e "s/$_rootuserid/$_croot&$_creset/g"); ###### PERF:~13ms
  fi
  res=$(paste -d" " <(echo "$res") <(echo "$_users")) ###### PERF:~20ms
fi

# GROUPS
if [ -z ${GROUPNAME+x} ]; then # if -G is not set ###### PERF:~52ms
  _groups=$(echo "$ll_res" | cut -d" " -f $_CURCOL) ###### PERF:~14ms
  _CURCOL=$(($_CURCOL+1))
  _groups=$(flush_left "$_groups") ###### PERF:~26ms
  res=$(paste -d" " <(echo "$res") <(echo "$_groups")) ###### PERF:~21ms
fi

# SIZES
_sizes=$(echo "$ll_res" | cut -d" " -f $_CURCOL) ###### PERF:~14ms
_CURCOL=$(($_CURCOL+1))
if [ -z ${HUMANREADABLE+x} ]; then # if -h is not set ###### PERF:~67ms
  _len_sizes=$(echo "$_sizes" | wc -L) ###### PERF:~15ms
  IFS=$'\n'; arr=( $(echo -e "$_sizes") ) ###### PERF:~9ms
  _sizes=$(for x in ${arr[@]} ; do  ###### PERF:~55ms
    _format="%"$_len_sizes"d"
    if [[ $x -lt 1024 ]]; then printf "$_cb$_format$_creset\n" $x;continue; fi
    if [[ $x -lt 1048576 ]]; then printf "$_ck$_format$_creset\n" $x;continue; fi
    if [[ $x -lt 1073741824 ]]; then printf "$_cm$_format$_creset\n" $x;continue; fi
    if [[ $x -lt 1099511627776 ]]; then printf "$_cg$_format$_creset\n" $x;continue; fi
    if [[ $x -ge 1099511627776 ]]; then printf "$_ct$_format$_creset\n" $x;continue; fi
  done;)
else # if -h is set ###### PERF:~56ms
  #Colorize B,K,M,G,T
  _prgx="[0-9]*\.*[0-9]*"
  _sizes=$(echo "$_sizes" | sed -e  '/[0-9]$/ s/$/B/'); # Add B letter at the end of Byte values. ###### PERF:~12ms
  _sizes=$(flush_right "$_sizes") # Align Right ###### PERF:~25ms
  _sizes=$(echo "$_sizes" | ###### PERF:~30ms
  sed -e "s/$_prgx$_lT/$_ct&$_creset/" |
  sed -e "s/$_prgx$_lG/$_cg&$_creset/" |
  sed -e "s/$_prgx$_lM/$_cm&$_creset/" |
  sed -e "s/$_prgx$_lK/$_ck&$_creset/" |
  sed -e "s/$_prgx$_lB/$_cb&$_creset/" |
  sed -e "s/$_lT/$_clT&$_creset/" |
  sed -e "s/$_lG/$_clG&$_creset/" |
  sed -e "s/$_lM/$_clM&$_creset/" |
  sed -e "s/$_lK/$_clK&$_creset/" |
  sed -e "s/$_lB/$_clB&$_creset/");
fi
res=$(paste -d" " <(echo "$res") <(echo "$_sizes")) ###### PERF:~25ms

# DATES
#          # Convert to array         # cut 6th column  # subtract from current date
IFS=$'\n'; arr=( $(echo -e "$ll_res" | cut -d" " -f $_CURCOL | awk '{print strftime("%s") - $1}') ) ###### PERF:~36ms
_CURCOL=$(($_CURCOL+1))
_dates2=$(for x in ${arr[@]} ; do ###### PERF:~80ms
  _format="%2d %3s"
  if [[ $x -lt 120 ]]; then printf "$_format\n" $x "$_lsec";continue; fi
  if [[ $x -lt 3600 ]]; then printf "$_format\n" $(($x / 60)) "$_lmin";continue; fi
  if [[ $x -lt 172800 ]]; then printf "$_format\n" $(($x / 3600)) "$_lhrs";continue; fi
  if [[ $x -lt 3888000 ]]; then printf "$_format\n" $(($x / 86400)) "$_lday";continue; fi
  if [[ $x -lt 31536000 ]]; then printf "$_format\n" $(($x / 2592000)) "$_lmon";continue; fi
  if [[ $x -ge 31536000 ]]; then printf "$_format\n" $(($x / 31536000)) "$_lyr";continue; fi
done;)

#Colorize New Passed times
_prgx="[0-9]*[[:blank:]]*"
_dates2=$(echo "$_dates2" | ###### PERF:~22ms
sed -e "s/$_prgx$_lsec/$_csec&$_creset/" |
sed -e "s/$_prgx$_lmin/$_cmin&$_creset/" |
sed -e "s/$_prgx$_lhrs/$_chrs&$_creset/" |
sed -e "s/$_prgx$_lday/$_cday&$_creset/" |
sed -e "s/$_prgx$_lmon/$_cmon&$_creset/" |
sed -e "s/$_prgx$_lyr/$_cyr&$_creset/");

# Get file list ffrom ll result
_entries=$(echo "$ll_res" | cut -d" " --complement -f 1-$(($_CURCOL-1))) ###### PERF:~15ms

# echo "$_sizes"
#
# exit;

# COMBINE ALL OF THEM AGAIN
res=$(paste -d" " <(echo "$res") <(echo "$_dates2") <(echo "$_entries")) ###### PERF:~30ms

echo "$res" ###### PERF:~60ms
echo "$ll_total"
_val=$(( $(date +%s%N)/1000000 - $_tsmp )); echo "Performance: $_val"


# _tsmp2=$(( $(date +%s%N)/1000000 ));
# _val2=$(( $(date +%s%N)/1000000 - $_tsmp2 )); echo "Performance: $_val2";exit 0;
